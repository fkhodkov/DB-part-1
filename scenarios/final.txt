Pager usage is off.
EXPLAIN ANALYZE
WITH created_account AS (
  INSERT INTO account (login, email, password)
  VALUES ((SELECT 'johndoe' || nextval('scenario2_applicant_seq')),
          'johndoe@email',
          crypt('qwerty', gen_salt('bf'))
  ) RETURNING account_id)
    INSERT INTO applicant (name, account_id)
    VALUES ('Джон Доу', (SELECT account_id FROM created_account));
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Insert on applicant  (cost=0.07..0.08 rows=1 width=226) (actual time=25.548..25.548 rows=0 loops=1)
   CTE created_account
     ->  Insert on account  (cost=0.02..0.04 rows=1 width=876) (actual time=21.109..21.112 rows=1 loops=1)
           InitPlan 1 (returns $0)
             ->  Result  (cost=0.00..0.02 rows=1 width=32) (actual time=1.121..1.122 rows=1 loops=1)
           ->  Result  (cost=0.00..0.03 rows=1 width=876) (actual time=14.997..14.999 rows=1 loops=1)
   InitPlan 3 (returns $3)
     ->  CTE Scan on created_account  (cost=0.00..0.02 rows=1 width=4) (actual time=21.123..21.127 rows=1 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=226) (actual time=22.973..22.975 rows=1 loops=1)
 Planning time: 3.345 ms
 Trigger for constraint applicant_account_id_fkey on applicant: time=6.267 calls=1
 Execution time: 35.248 ms
(12 rows)

EXPLAIN ANALYZE
SELECT account_id
  FROM account
 WHERE login='johndoe1'
   AND password=crypt('qwerty', password);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=11.475..11.483 rows=1 loops=1)
   Index Cond: ((login)::text = 'johndoe1'::text)
   Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
 Planning time: 1.699 ms
 Execution time: 11.528 ms
(5 rows)

EXPLAIN ANALYZE
SELECT account_id, applicant_id
  FROM applicant JOIN account USING (account_id)
 WHERE login = 'johndoe1';
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.85..16.90 rows=1 width=8) (actual time=0.044..0.046 rows=1 loops=1)
   ->  Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=0.021..0.022 rows=1 loops=1)
         Index Cond: ((login)::text = 'johndoe1'::text)
   ->  Index Scan using applicant_account_idx on applicant  (cost=0.42..8.44 rows=1 width=8) (actual time=0.019..0.020 rows=1 loops=1)
         Index Cond: (account_id = account.account_id)
 Planning time: 1.270 ms
 Execution time: 0.096 ms
(7 rows)

EXPLAIN ANALYZE
INSERT INTO resume (
  applicant_id,
  title,
  city_id,
  experience_years,
  schedule,
  salary
) VALUES (
  1000007,
  'Архитектор БД',
  1,
  '0-1',
  'FULL_TIME',
  INT4RANGE(50000, NULL)
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on resume  (cost=0.00..0.01 rows=1 width=302) (actual time=2.445..2.445 rows=0 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=302) (actual time=0.299..0.300 rows=1 loops=1)
 Planning time: 0.120 ms
 Trigger for constraint resume_applicant_id_fkey: time=0.293 calls=1
 Trigger for constraint resume_city_id_fkey: time=1.786 calls=1
 Execution time: 4.762 ms
(6 rows)

EXPLAIN ANALYZE
SELECT resume_id, title FROM resume
 WHERE applicant_id = 1000007;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on resume  (cost=28.03..43.98 rows=4 width=24) (actual time=0.442..2.840 rows=15 loops=1)
   Recheck Cond: (applicant_id = 1000007)
   Heap Blocks: exact=15
   ->  Bitmap Index Scan on resume_gin_idx  (cost=0.00..28.03 rows=4 width=0) (actual time=0.403..0.403 rows=15 loops=1)
         Index Cond: (applicant_id = 1000007)
 Planning time: 0.174 ms
 Execution time: 2.882 ms
(7 rows)

EXPLAIN ANALYZE
INSERT INTO experience (resume_id, employer, job_title, job_description, dates)
VALUES (
  3000008,
  'Огненный стартап',
  'Архитектор БД',
  'Задачи:
  * Понять сценарии использования приложения
  * Спроектировать БД, которая будет это приложение обслуживать.',
  DATERANGE('2019-01-01', NULL)
);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Insert on experience  (cost=0.00..0.01 rows=1 width=508) (actual time=1.450..1.450 rows=0 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=508) (actual time=0.271..0.272 rows=1 loops=1)
 Planning time: 0.069 ms
 Trigger for constraint experience_resume_id_fkey: time=0.266 calls=1
 Execution time: 1.779 ms
(5 rows)

EXPLAIN ANALYZE
WITH my_resume AS (
  SELECT title, city_id, schedule, salary, experience_years
    FROM resume WHERE resume_id = 3000008)
SELECT vacancy_id, vacancy.title, employer.title, vacancy.experience_years, vacancy.salary
  FROM vacancy JOIN employer USING (employer_id)
 WHERE vacancy.title = (SELECT title FROM my_resume) AND
       vacancy.city_id = (SELECT city_id FROM my_resume) AND
       vacancy.schedule = (SELECT schedule FROM my_resume) AND
       (vacancy.experience_years = 'ANY' OR
        vacancy.experience_years = (SELECT experience_years FROM my_resume)) AND
       vacancy.salary && (SELECT salary FROM my_resume);
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=191.85..3487.02 rows=9 width=73) (actual time=1.344..1.352 rows=3 loops=1)
   CTE my_resume
     ->  Index Scan using resume_pkey on resume  (cost=0.43..8.45 rows=1 width=46) (actual time=0.023..0.024 rows=1 loops=1)
           Index Cond: (resume_id = 3000008)
   InitPlan 2 (returns $1)
     ->  CTE Scan on my_resume  (cost=0.00..0.02 rows=1 width=218) (actual time=0.025..0.026 rows=1 loops=1)
   InitPlan 3 (returns $2)
     ->  CTE Scan on my_resume my_resume_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   InitPlan 4 (returns $3)
     ->  CTE Scan on my_resume my_resume_2  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=1)
   InitPlan 5 (returns $4)
     ->  CTE Scan on my_resume my_resume_3  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
   InitPlan 6 (returns $5)
     ->  CTE Scan on my_resume my_resume_4  (cost=0.00..0.02 rows=1 width=32) (actual time=0.001..0.001 rows=1 loops=1)
   ->  Bitmap Heap Scan on vacancy  (cost=183.01..3403.68 rows=9 width=47) (actual time=1.324..1.327 rows=3 loops=1)
         Recheck Cond: ((((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = 'ANY'::experience_years_t) AND (schedule = $3)) OR (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3)))
         Filter: (salary && $5)
         Heap Blocks: exact=1
         ->  BitmapOr  (cost=183.01..183.01 rows=1000 width=0) (actual time=1.269..1.269 rows=0 loops=1)
               ->  Bitmap Index Scan on vacancy_gin_idx  (cost=0.00..91.51 rows=500 width=0) (actual time=0.886..0.886 rows=1 loops=1)
                     Index Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = 'ANY'::experience_years_t) AND (schedule = $3))
               ->  Bitmap Index Scan on vacancy_gin_idx  (cost=0.00..91.50 rows=500 width=0) (actual time=0.382..0.383 rows=2 loops=1)
                     Index Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3))
   ->  Index Scan using employer_pkey on employer  (cost=0.29..8.31 rows=1 width=34) (actual time=0.007..0.007 rows=1 loops=3)
         Index Cond: (employer_id = vacancy.employer_id)
 Planning time: 2.726 ms
 Execution time: 1.642 ms
(27 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (3000008, 6, 'OPEN')
         RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  5000012,
  'Добрый вечер!
  Прошу рассмотреть мою кандидатуру на должно Архитектора БД.',
  TRUE,
  now()
);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.01..0.04 rows=1 width=49) (actual time=2.466..2.466 rows=0 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=3.130..3.134 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.893..0.894 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=1.412..1.414 rows=1 loops=1)
 Planning time: 0.033 ms
 Trigger for constraint message_application_id_fkey on message: time=0.663 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.325 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.548 calls=1
 Execution time: 7.342 ms
(10 rows)

EXPLAIN ANALYZE
SELECT application_id
  FROM application
 WHERE resume_id = 3000008 AND
       vacancy_id = 6;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using application_resume_idx on application  (cost=0.43..12.47 rows=1 width=4) (actual time=0.025..0.119 rows=15 loops=1)
   Index Cond: (resume_id = 3000008)
   Filter: (vacancy_id = 6)
   Rows Removed by Filter: 28
 Planning time: 0.264 ms
 Execution time: 0.155 ms
(6 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (3000008, 7, 'OPEN')
  RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  (SELECT application_id FROM created_application),
  'Добрый вечер!
Прошу рассмотреть мою кандидатуру на должно Архитектора БД.',
  TRUE,
  now()
) RETURNING application_id;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.04..0.06 rows=1 width=49) (actual time=0.193..0.194 rows=1 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.124..0.126 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.009..0.010 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_application  (cost=0.00..0.02 rows=1 width=4) (actual time=0.127..0.129 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.151..0.152 rows=1 loops=1)
 Planning time: 0.104 ms
 Trigger for constraint message_application_id_fkey on message: time=0.092 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.265 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.136 calls=1
 Execution time: 0.779 ms
(12 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (3000008, 8, 'OPEN')
         RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  (SELECT application_id FROM created_application),
  'Добрый вечер!
  Прошу рассмотреть мою кандидатуру на должно Архитектора БД.',
  TRUE,
  now()
);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.04..0.06 rows=1 width=49) (actual time=0.160..0.160 rows=0 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.100..0.101 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.011..0.011 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_application  (cost=0.00..0.02 rows=1 width=4) (actual time=0.103..0.104 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.129..0.130 rows=1 loops=1)
 Planning time: 0.108 ms
 Trigger for constraint message_application_id_fkey on message: time=0.085 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.198 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.113 calls=1
 Execution time: 0.648 ms
(12 rows)

EXPLAIN ANALYZE
SELECT application_id
  FROM application
 WHERE resume_id = 3000008 AND
       vacancy_id = 8;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using application_resume_idx on application  (cost=0.43..12.47 rows=1 width=4) (actual time=0.023..0.059 rows=15 loops=1)
   Index Cond: (resume_id = 3000008)
   Filter: (vacancy_id = 8)
   Rows Removed by Filter: 30
 Planning time: 0.123 ms
 Execution time: 0.099 ms
(6 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000012,
  'Добрый вечер!
В дополнение к тому, что указано в вакансии, добавляем:
  * рабочий день составляет 25 часов в сутки,
  * без выходных.
Приходите на собеседование завтра в 23:00.
Адрес: за гаражами',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.052..0.052 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.013..0.013 rows=1 loops=1)
 Planning time: 0.022 ms
 Trigger for constraint message_application_id_fkey: time=0.129 calls=1
 Execution time: 0.212 ms
(5 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000014,
  'Добрый вечер!
Решите, пожалуйста, тестовое задание.  
Вы можете скачать его по ссылке:
https://eprst-invest/testovoe-zadanie',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.046..0.046 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.009..0.010 rows=1 loops=1)
 Planning time: 0.021 ms
 Trigger for constraint message_application_id_fkey: time=0.130 calls=1
 Execution time: 0.204 ms
(5 rows)

EXPLAIN ANALYZE
SELECT application_id, employer.title, vacancy.salary, message.text
  FROM application JOIN vacancy USING (vacancy_id)
         JOIN employer USING (employer_id)
         JOIN message USING (application_id)
 WHERE resume_id = 3000008
   AND NOT applicant_to_employer;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1.58..47.36 rows=3 width=75) (actual time=0.319..0.846 rows=30 loops=1)
   ->  Nested Loop  (cost=1.15..29.98 rows=2 width=48) (actual time=0.077..0.498 rows=45 loops=1)
         ->  Nested Loop  (cost=0.86..29.35 rows=2 width=22) (actual time=0.059..0.305 rows=45 loops=1)
               ->  Index Scan using application_resume_idx on application  (cost=0.43..12.47 rows=2 width=8) (actual time=0.018..0.046 rows=45 loops=1)
                     Index Cond: (resume_id = 3000008)
               ->  Index Scan using vacancy_pkey on vacancy  (cost=0.42..8.44 rows=1 width=22) (actual time=0.005..0.005 rows=1 loops=45)
                     Index Cond: (vacancy_id = application.vacancy_id)
         ->  Index Scan using employer_pkey on employer  (cost=0.29..0.31 rows=1 width=34) (actual time=0.003..0.003 rows=1 loops=45)
               Index Cond: (employer_id = vacancy.employer_id)
   ->  Index Scan using message_application_idx on message  (cost=0.43..8.63 rows=6 width=31) (actual time=0.005..0.007 rows=1 loops=45)
         Index Cond: (application_id = application.application_id)
         Filter: (NOT applicant_to_employer)
         Rows Removed by Filter: 2
 Planning time: 2.705 ms
 Execution time: 0.942 ms
(15 rows)

BEGIN;
BEGIN
EXPLAIN ANALYZE
  INSERT INTO message (
    application_id, text, applicant_to_employer, created
  ) VALUES (
    5000012,
    'Здравствуйте,
К сожалению, по итогам длительных размышлений я пришел к выводу,
что вынужден отказаться от Вашей вакансии.
Спасибо, что уделили мне время!',
    TRUE,
    now()
  );
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.068..0.068 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.016..0.017 rows=1 loops=1)
 Planning time: 0.038 ms
 Trigger for constraint message_application_id_fkey: time=0.240 calls=1
 Execution time: 0.353 ms
(5 rows)

EXPLAIN ANALYZE
  UPDATE application SET application_status = 'CLOSED'
   WHERE application_id = 5000012;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Update on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.111..0.111 rows=0 loops=1)
   ->  Index Scan using application_pkey on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.019..0.021 rows=1 loops=1)
         Index Cond: (application_id = 5000012)
 Planning time: 0.103 ms
 Execution time: 0.161 ms
(5 rows)

END;
COMMIT
BEGIN;
BEGIN
EXPLAIN ANALYZE
  INSERT INTO message (
    application_id, text, applicant_to_employer, created
  ) VALUES (
    5000014,
    'Здравствуйте,
Я принимаю Ваше предложение.  С нетерпением жду начала работы!',
    TRUE,
    now()
  );
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.170..0.171 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.025..0.026 rows=1 loops=1)
 Planning time: 0.058 ms
 Trigger for constraint message_application_id_fkey: time=0.420 calls=1
 Execution time: 0.666 ms
(5 rows)

EXPLAIN ANALYZE
  UPDATE application SET application_status = 'CLOSED'
   WHERE application_id = 5000014;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Update on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.068..0.069 rows=0 loops=1)
   ->  Index Scan using application_pkey on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.029..0.032 rows=1 loops=1)
         Index Cond: (application_id = 5000014)
 Planning time: 0.184 ms
 Execution time: 0.140 ms
(5 rows)

END;
COMMIT
Pager usage is off.
CREATE SEQUENCE IF NOT EXISTS scenario2_employer_seq;
CREATE SEQUENCE
EXPLAIN ANALYZE
INSERT INTO account (login, email, password)
VALUES (
  (SELECT 'waterhouse' || nextval('scenario2_employer_seq')),
  'waterhouse@epiphyte',
  crypt('qwerty', gen_salt('bf')));
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Insert on account  (cost=0.02..0.04 rows=1 width=876) (actual time=9.609..9.609 rows=0 loops=1)
   InitPlan 1 (returns $0)
     ->  Result  (cost=0.00..0.02 rows=1 width=32) (actual time=3.537..3.538 rows=1 loops=1)
   ->  Result  (cost=0.00..0.03 rows=1 width=876) (actual time=9.463..9.464 rows=1 loops=1)
 Planning time: 0.222 ms
 Execution time: 10.313 ms
(6 rows)

EXPLAIN ANALYZE
SELECT account_id FROM account
 WHERE login='waterhouse1'
   AND password=crypt('qwerty', password);
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=5.733..5.735 rows=1 loops=1)
   Index Cond: ((login)::text = 'waterhouse1'::text)
   Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
 Planning time: 0.494 ms
 Execution time: 5.787 ms
(5 rows)

EXPLAIN ANALYZE
WITH created_employer AS (
  INSERT INTO employer (title)
  VALUES ('Epiphyte Corporation') RETURNING employer_id)
    INSERT INTO employer_account (account_id, employer_id)
    VALUES (
      (SELECT account_id FROM account
        WHERE login='waterhouse1'
          AND password=crypt('qwerty', password)),
      (SELECT employer_id FROM created_employer));
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Insert on employer_account  (cost=8.49..8.50 rows=1 width=8) (actual time=9.692..9.692 rows=0 loops=1)
   CTE created_employer
     ->  Insert on employer  (cost=0.00..0.01 rows=1 width=222) (actual time=1.063..1.065 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=222) (actual time=0.410..0.411 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_employer  (cost=0.00..0.02 rows=1 width=4) (actual time=1.066..1.067 rows=1 loops=1)
   InitPlan 3 (returns $3)
     ->  Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=5.738..5.741 rows=1 loops=1)
           Index Cond: ((login)::text = 'waterhouse1'::text)
           Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
   ->  Result  (cost=0.00..0.01 rows=1 width=8) (actual time=6.812..6.812 rows=1 loops=1)
 Planning time: 0.176 ms
 Trigger for constraint employer_account_employer_id_fkey on employer_account: time=0.513 calls=1
 Trigger for constraint employer_account_account_id_fkey on employer_account: time=0.177 calls=1
 Execution time: 10.547 ms
(15 rows)

EXPLAIN ANALYZE
SELECT employer_id, title
  FROM employer JOIN employer_account USING (employer_id)
 WHERE account_id = (SELECT account_id FROM account
                      WHERE login='waterhouse1'
                        AND password=crypt('qwerty', password));
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=8.74..1703.54 rows=1 width=34) (actual time=24.579..24.610 rows=15 loops=1)
   InitPlan 1 (returns $0)
     ->  Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=5.893..5.896 rows=1 loops=1)
           Index Cond: ((login)::text = 'waterhouse1'::text)
           Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
   ->  Seq Scan on employer_account  (cost=0.00..1686.78 rows=1 width=4) (actual time=24.538..24.542 rows=15 loops=1)
         Filter: (account_id = $0)
         Rows Removed by Filter: 100021
   ->  Index Scan using employer_pkey on employer  (cost=0.29..8.31 rows=1 width=34) (actual time=0.002..0.002 rows=1 loops=15)
         Index Cond: (employer_id = employer_account.employer_id)
 Planning time: 0.784 ms
 Execution time: 24.659 ms
(12 rows)

EXPLAIN ANALYZE
INSERT INTO vacancy (
  employer_id, title, city_id, salary, experience_years, schedule, vacancy_status)
VALUES (
  100007,
  'Java-программист',
  1, INT4RANGE(50000, 100000),
  '1-3',
  'FULL_TIME',
  'OPEN'
);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Insert on vacancy  (cost=0.00..0.01 rows=1 width=306) (actual time=0.959..0.959 rows=0 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=306) (actual time=0.346..0.347 rows=1 loops=1)
 Planning time: 0.098 ms
 Trigger for constraint vacancy_employer_id_fkey: time=0.213 calls=1
 Trigger for constraint vacancy_city_id_fkey: time=0.258 calls=1
 Execution time: 1.555 ms
(6 rows)

EXPLAIN ANALYZE
SELECT vacancy_id, title
  FROM vacancy
 WHERE employer_id = 100007;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on vacancy  (cost=28.08..67.48 rows=10 width=25) (actual time=0.100..0.127 rows=15 loops=1)
   Recheck Cond: (employer_id = 100007)
   Heap Blocks: exact=3
   ->  Bitmap Index Scan on vacancy_gin_idx  (cost=0.00..28.08 rows=10 width=0) (actual time=0.071..0.072 rows=15 loops=1)
         Index Cond: (employer_id = 100007)
 Planning time: 0.324 ms
 Execution time: 0.197 ms
(7 rows)

EXPLAIN ANALYZE
WITH my_vacancy AS (
  SELECT title, city_id, schedule, salary, experience_years
    FROM vacancy WHERE vacancy_id = 1000010)
SELECT resume_id, applicant.name, resume.experience_years, resume.salary
  FROM resume JOIN applicant USING (applicant_id)
 WHERE resume.title = (SELECT title FROM my_vacancy) AND
       resume.city_id = (SELECT city_id FROM my_vacancy) AND
       resume.schedule = (SELECT schedule FROM my_vacancy) AND
       resume.experience_years = (SELECT experience_years FROM my_vacancy) AND
       resume.salary && (SELECT salary FROM my_vacancy);
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=198.73..18413.95 rows=63 width=49) (actual time=0.649..0.654 rows=2 loops=1)
   CTE my_vacancy
     ->  Index Scan using vacancy_pkey on vacancy  (cost=0.42..8.44 rows=1 width=47) (actual time=0.019..0.020 rows=1 loops=1)
           Index Cond: (vacancy_id = 1000010)
   InitPlan 2 (returns $1)
     ->  CTE Scan on my_vacancy  (cost=0.00..0.02 rows=1 width=218) (actual time=0.027..0.028 rows=1 loops=1)
   InitPlan 3 (returns $2)
     ->  CTE Scan on my_vacancy my_vacancy_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   InitPlan 4 (returns $3)
     ->  CTE Scan on my_vacancy my_vacancy_2  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=1)
   InitPlan 5 (returns $4)
     ->  CTE Scan on my_vacancy my_vacancy_3  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   InitPlan 6 (returns $5)
     ->  CTE Scan on my_vacancy my_vacancy_4  (cost=0.00..0.02 rows=1 width=32) (actual time=0.001..0.001 rows=1 loops=1)
   ->  Bitmap Heap Scan on resume  (cost=189.77..17873.53 rows=63 width=26) (actual time=0.624..0.626 rows=2 loops=1)
         Recheck Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3))
         Filter: (salary && $5)
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on resume_gin_idx  (cost=0.00..189.75 rows=6250 width=0) (actual time=0.578..0.578 rows=2 loops=1)
               Index Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3))
   ->  Index Scan using applicant_pkey on applicant  (cost=0.42..8.44 rows=1 width=31) (actual time=0.013..0.013 rows=1 loops=2)
         Index Cond: (applicant_id = resume.applicant_id)
 Planning time: 2.320 ms
 Execution time: 0.887 ms
(24 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (5, 1000010, 'OPEN')
  RETURNING application_id
) SELECT application_id
    FROM created_application;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 CTE Scan on created_application  (cost=0.01..0.04 rows=1 width=4) (actual time=0.482..0.483 rows=1 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.480..0.481 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.037..0.038 rows=1 loops=1)
 Planning time: 0.034 ms
 Trigger for constraint application_resume_id_fkey: time=0.282 calls=1
 Trigger for constraint application_vacancy_id_fkey: time=0.129 calls=1
 Execution time: 0.980 ms
(8 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  5000015,
  'Добрый вечер!
Приглашаем Вас пройти тестовое задание на вакансию Java-программист.
Ссылка на задание: https://epiphyte/test',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.215..0.216 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.088..0.089 rows=1 loops=1)
 Planning time: 0.032 ms
 Trigger for constraint message_application_id_fkey: time=0.446 calls=1
 Execution time: 0.784 ms
(5 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (6, 1000010, 'OPEN')
  RETURNING application_id
) SELECT application_id
    FROM created_application;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 CTE Scan on created_application  (cost=0.01..0.04 rows=1 width=4) (actual time=0.113..0.115 rows=1 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.110..0.112 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.020..0.021 rows=1 loops=1)
 Planning time: 0.099 ms
 Trigger for constraint application_resume_id_fkey: time=0.261 calls=1
 Trigger for constraint application_vacancy_id_fkey: time=0.140 calls=1
 Execution time: 0.592 ms
(8 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  5000017,
  'Добрый вечер!
Приглашаем Вас пройти тестовое задание на вакансию Java-программист.
Ссылка на задание: https://epiphyte/test',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.131..0.131 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.025..0.026 rows=1 loops=1)
 Planning time: 0.047 ms
 Trigger for constraint message_application_id_fkey: time=0.238 calls=1
 Execution time: 0.432 ms
(5 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000015,
  'Добрый вечер!
Вот мое решение тестового задания: https://patrikeevna/reshenie
С нетерпепием жду вашего отклика',
  TRUE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.111..0.111 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.023..0.024 rows=1 loops=1)
 Planning time: 0.042 ms
 Trigger for constraint message_application_id_fkey: time=0.220 calls=1
 Execution time: 0.407 ms
(5 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (1, 1000010, 'OPEN')
  RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  (SELECT application_id FROM created_application),
  'Добрый вечер!
Прошу рассмотреть мою кандидатуру на должно Java-программист.',
  TRUE,
  now()
);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.04..0.06 rows=1 width=49) (actual time=0.191..0.191 rows=0 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.090..0.092 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.011..0.012 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_application  (cost=0.00..0.02 rows=1 width=4) (actual time=0.094..0.096 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.120..0.120 rows=1 loops=1)
 Planning time: 0.149 ms
 Trigger for constraint message_application_id_fkey on message: time=0.108 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.295 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.148 calls=1
 Execution time: 0.864 ms
(12 rows)

EXPLAIN ANALYZE
SELECT application_id, resume_id, message.text
  FROM application JOIN resume USING (resume_id)
         JOIN message USING (application_id)
 WHERE vacancy_id = 1000010 AND applicant_to_employer;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1.30..107.35 rows=9 width=35) (actual time=0.041..0.720 rows=30 loops=1)
   ->  Nested Loop  (cost=0.86..55.22 rows=6 width=8) (actual time=0.031..0.322 rows=45 loops=1)
         ->  Index Scan using application_vacancy_idx on application  (cost=0.43..28.54 rows=6 width=8) (actual time=0.016..0.049 rows=45 loops=1)
               Index Cond: (vacancy_id = 1000010)
         ->  Index Only Scan using resume_pkey on resume  (cost=0.43..4.45 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=45)
               Index Cond: (resume_id = application.resume_id)
               Heap Fetches: 0
   ->  Index Scan using message_application_idx on message  (cost=0.43..8.63 rows=6 width=31) (actual time=0.005..0.008 rows=1 loops=45)
         Index Cond: (application_id = application.application_id)
         Filter: applicant_to_employer
         Rows Removed by Filter: 1
 Planning time: 1.186 ms
 Execution time: 0.788 ms
(13 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000015,
  'Добрый день!
Поздравляем!  Вы приняты!',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.096..0.096 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.021..0.021 rows=1 loops=1)
 Planning time: 0.045 ms
 Trigger for constraint message_application_id_fkey: time=0.181 calls=1
 Execution time: 0.330 ms
(5 rows)

BEGIN;
BEGIN
EXPLAIN ANALYZE
  UPDATE vacancy SET vacancy_status = 'CLOSED'
   WHERE vacancy_id = 1000010;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Update on vacancy  (cost=0.42..8.44 rows=1 width=109) (actual time=0.066..0.066 rows=0 loops=1)
   ->  Index Scan using vacancy_pkey on vacancy  (cost=0.42..8.44 rows=1 width=109) (actual time=0.018..0.019 rows=1 loops=1)
         Index Cond: (vacancy_id = 1000010)
 Planning time: 0.149 ms
 Execution time: 0.114 ms
(5 rows)

EXPLAIN ANALYZE
  UPDATE application SET application_status = 'CLOSED'
   WHERE vacancy_id = 1000010;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Update on application  (cost=0.43..28.54 rows=6 width=22) (actual time=0.333..0.333 rows=0 loops=1)
   ->  Index Scan using application_vacancy_idx on application  (cost=0.43..28.54 rows=6 width=22) (actual time=0.018..0.049 rows=45 loops=1)
         Index Cond: (vacancy_id = 1000010)
 Planning time: 0.092 ms
 Execution time: 0.371 ms
(5 rows)

END;
COMMIT
