Pager usage is off.
EXPLAIN ANALYZE
WITH created_account AS (
  INSERT INTO account (login, email, password)
  VALUES ((SELECT 'johndoe' || nextval('scenario2_applicant_seq')),
          'johndoe@email',
          crypt('qwerty', gen_salt('bf'))
  ) RETURNING account_id)
    INSERT INTO applicant (name, account_id)
    VALUES ('Джон Доу', (SELECT account_id FROM created_account));
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Insert on applicant  (cost=0.07..0.08 rows=1 width=226) (actual time=11.965..11.965 rows=0 loops=1)
   CTE created_account
     ->  Insert on account  (cost=0.02..0.04 rows=1 width=876) (actual time=11.355..11.357 rows=1 loops=1)
           InitPlan 1 (returns $0)
             ->  Result  (cost=0.00..0.02 rows=1 width=32) (actual time=0.073..0.074 rows=1 loops=1)
           ->  Result  (cost=0.00..0.03 rows=1 width=876) (actual time=10.777..10.778 rows=1 loops=1)
   InitPlan 3 (returns $3)
     ->  CTE Scan on created_account  (cost=0.00..0.02 rows=1 width=4) (actual time=11.364..11.366 rows=1 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=226) (actual time=11.616..11.616 rows=1 loops=1)
 Planning time: 0.634 ms
 Trigger for constraint applicant_account_id_fkey on applicant: time=1.080 calls=1
 Execution time: 15.198 ms
(12 rows)

EXPLAIN ANALYZE
SELECT account_id
  FROM account
 WHERE login='johndoe1'
   AND password=crypt('qwerty', password);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=12.292..12.296 rows=1 loops=1)
   Index Cond: ((login)::text = 'johndoe1'::text)
   Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
 Planning time: 0.654 ms
 Execution time: 12.332 ms
(5 rows)

EXPLAIN ANALYZE
SELECT account_id, applicant_id
  FROM applicant JOIN account USING (account_id)
 WHERE login = 'johndoe1';
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.85..16.90 rows=1 width=8) (actual time=0.048..0.050 rows=1 loops=1)
   ->  Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=0.026..0.027 rows=1 loops=1)
         Index Cond: ((login)::text = 'johndoe1'::text)
   ->  Index Scan using applicant_account_idx on applicant  (cost=0.42..8.44 rows=1 width=8) (actual time=0.019..0.020 rows=1 loops=1)
         Index Cond: (account_id = account.account_id)
 Planning time: 0.796 ms
 Execution time: 0.091 ms
(7 rows)

EXPLAIN ANALYZE
INSERT INTO resume (
  applicant_id,
  title,
  city_id,
  experience_years,
  schedule,
  salary_min,
  salary_max
) VALUES (
  1000007,
  'Архитектор БД',
  1,
  '0-1',
  'FULL_TIME',
  50000,
  NULL
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on resume  (cost=0.00..0.01 rows=1 width=282) (actual time=2.271..2.271 rows=0 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=282) (actual time=0.055..0.056 rows=1 loops=1)
 Planning time: 0.036 ms
 Trigger for constraint resume_applicant_id_fkey: time=0.376 calls=1
 Trigger for constraint resume_city_id_fkey: time=1.352 calls=1
 Execution time: 4.309 ms
(6 rows)

EXPLAIN ANALYZE
SELECT resume_id, title FROM resume
 WHERE applicant_id = 1000007;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on resume  (cost=28.07..63.95 rows=9 width=24) (actual time=0.228..0.387 rows=18 loops=1)
   Recheck Cond: (applicant_id = 1000007)
   Heap Blocks: exact=15
   ->  Bitmap Index Scan on resume_gin_idx  (cost=0.00..28.07 rows=9 width=0) (actual time=0.208..0.208 rows=18 loops=1)
         Index Cond: (applicant_id = 1000007)
 Planning time: 0.688 ms
 Execution time: 0.468 ms
(7 rows)

EXPLAIN ANALYZE
INSERT INTO experience (resume_id, employer, job_title, job_description, dates)
VALUES (
  3000008,
  'Огненный стартап',
  'Архитектор БД',
  'Задачи:
  * Понять сценарии использования приложения
  * Спроектировать БД, которая будет это приложение обслуживать.',
  DATERANGE('2019-01-01', NULL)
);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Insert on experience  (cost=0.00..0.01 rows=1 width=508) (actual time=0.352..0.352 rows=0 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=508) (actual time=0.074..0.074 rows=1 loops=1)
 Planning time: 0.183 ms
 Trigger for constraint experience_resume_id_fkey: time=0.382 calls=1
 Execution time: 0.953 ms
(5 rows)

EXPLAIN ANALYZE
WITH my_resume AS (
  SELECT title, city_id, schedule, salary_min, salary_max, experience_years
    FROM resume WHERE resume_id = 3000008)
  SELECT vacancy_id, vacancy.title, employer.title, vacancy.experience_years,
         vacancy.salary_min, vacancy.salary_max
  FROM vacancy JOIN employer USING (employer_id)
 WHERE vacancy.title = (SELECT title FROM my_resume) AND
       vacancy.city_id = (SELECT city_id FROM my_resume) AND
       vacancy.schedule = (SELECT schedule FROM my_resume) AND
       (vacancy.experience_years = 'ANY' OR
        vacancy.experience_years = (SELECT experience_years FROM my_resume)) AND
        (vacancy.salary_min IS NULL OR (SELECT salary_max FROM my_resume) IS NULL OR
         vacancy.salary_min <= (SELECT salary_max FROM my_resume)) AND 
        (vacancy.salary_max IS NULL OR (SELECT salary_min FROM my_resume) IS NULL OR
         vacancy.salary_max >= (SELECT salary_min FROM my_resume));
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=189.59..3824.13 rows=86 width=67) (actual time=0.655..0.666 rows=3 loops=1)
   CTE my_resume
     ->  Index Scan using resume_pkey on resume  (cost=0.43..8.45 rows=1 width=40) (actual time=0.014..0.015 rows=1 loops=1)
           Index Cond: (resume_id = 3000008)
   InitPlan 2 (returns $1)
     ->  CTE Scan on my_resume  (cost=0.00..0.02 rows=1 width=218) (actual time=0.017..0.018 rows=1 loops=1)
   InitPlan 3 (returns $2)
     ->  CTE Scan on my_resume my_resume_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   InitPlan 4 (returns $3)
     ->  CTE Scan on my_resume my_resume_2  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   InitPlan 5 (returns $4)
     ->  CTE Scan on my_resume my_resume_3  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   InitPlan 6 (returns $5)
     ->  CTE Scan on my_resume my_resume_4  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   InitPlan 7 (returns $6)
     ->  CTE Scan on my_resume my_resume_5  (cost=0.00..0.02 rows=1 width=4) (never executed)
   InitPlan 8 (returns $7)
     ->  CTE Scan on my_resume my_resume_6  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   InitPlan 9 (returns $8)
     ->  CTE Scan on my_resume my_resume_7  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=1)
   ->  Bitmap Heap Scan on vacancy  (cost=180.69..3160.86 rows=86 width=41) (actual time=0.639..0.643 rows=3 loops=1)
         Recheck Cond: ((((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = 'ANY'::experience_years_t) AND (schedule = $3)) OR (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3)))
         Filter: (((salary_min IS NULL) OR ($5 IS NULL) OR (salary_min <= $6)) AND ((salary_max IS NULL) OR ($7 IS NULL) OR (salary_max >= $8)))
         Heap Blocks: exact=1
         ->  BitmapOr  (cost=180.69..180.69 rows=843 width=0) (actual time=0.606..0.606 rows=0 loops=1)
               ->  Bitmap Index Scan on vacancy_gin_idx  (cost=0.00..90.39 rows=426 width=0) (actual time=0.446..0.446 rows=1 loops=1)
                     Index Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = 'ANY'::experience_years_t) AND (schedule = $3))
               ->  Bitmap Index Scan on vacancy_gin_idx  (cost=0.00..90.26 rows=417 width=0) (actual time=0.159..0.159 rows=2 loops=1)
                     Index Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3))
   ->  Index Scan using employer_pkey on employer  (cost=0.29..7.61 rows=1 width=34) (actual time=0.006..0.006 rows=1 loops=3)
         Index Cond: (employer_id = vacancy.employer_id)
 Planning time: 1.129 ms
 Execution time: 0.883 ms
(33 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (3000008, 6, 'OPEN')
         RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  5000012,
  'Добрый вечер!
  Прошу рассмотреть мою кандидатуру на должно Архитектора БД.',
  TRUE,
  now()
);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.01..0.04 rows=1 width=49) (actual time=0.340..0.340 rows=0 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.393..0.393 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.099..0.100 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.087..0.087 rows=1 loops=1)
 Planning time: 0.037 ms
 Trigger for constraint message_application_id_fkey on message: time=0.332 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.173 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.224 calls=1
 Execution time: 1.650 ms
(10 rows)

EXPLAIN ANALYZE
SELECT application_id
  FROM application
 WHERE resume_id = 3000008 AND
       vacancy_id = 6;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on application  (cost=9.18..13.20 rows=1 width=4) (actual time=0.039..0.053 rows=19 loops=1)
   Recheck Cond: ((resume_id = 3000008) AND (vacancy_id = 6))
   Heap Blocks: exact=3
   ->  BitmapAnd  (cost=9.18..9.18 rows=1 width=0) (actual time=0.025..0.025 rows=0 loops=1)
         ->  Bitmap Index Scan on application_resume_idx  (cost=0.00..4.46 rows=3 width=0) (actual time=0.013..0.013 rows=55 loops=1)
               Index Cond: (resume_id = 3000008)
         ->  Bitmap Index Scan on application_vacancy_idx  (cost=0.00..4.48 rows=6 width=0) (actual time=0.010..0.010 rows=35 loops=1)
               Index Cond: (vacancy_id = 6)
 Planning time: 0.126 ms
 Execution time: 0.081 ms
(10 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (3000008, 7, 'OPEN')
  RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  (SELECT application_id FROM created_application),
  'Добрый вечер!
Прошу рассмотреть мою кандидатуру на должно Архитектора БД.',
  TRUE,
  now()
) RETURNING application_id;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.04..0.06 rows=1 width=49) (actual time=0.114..0.115 rows=1 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.035..0.036 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.003..0.004 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_application  (cost=0.00..0.02 rows=1 width=4) (actual time=0.036..0.037 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.047..0.047 rows=1 loops=1)
 Planning time: 0.052 ms
 Trigger for constraint message_application_id_fkey on message: time=0.053 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.101 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.067 calls=1
 Execution time: 0.379 ms
(12 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (3000008, 8, 'OPEN')
         RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  (SELECT application_id FROM created_application),
  'Добрый вечер!
  Прошу рассмотреть мою кандидатуру на должно Архитектора БД.',
  TRUE,
  now()
);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.04..0.06 rows=1 width=49) (actual time=0.068..0.068 rows=0 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.044..0.045 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.003..0.003 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_application  (cost=0.00..0.02 rows=1 width=4) (actual time=0.046..0.047 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.055..0.055 rows=1 loops=1)
 Planning time: 0.045 ms
 Trigger for constraint message_application_id_fkey on message: time=0.052 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.096 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.065 calls=1
 Execution time: 0.321 ms
(12 rows)

EXPLAIN ANALYZE
SELECT application_id
  FROM application
 WHERE resume_id = 3000008 AND
       vacancy_id = 8;
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on application  (cost=9.18..13.20 rows=1 width=4) (actual time=0.028..0.035 rows=19 loops=1)
   Recheck Cond: ((resume_id = 3000008) AND (vacancy_id = 8))
   Heap Blocks: exact=2
   ->  BitmapAnd  (cost=9.18..9.18 rows=1 width=0) (actual time=0.022..0.022 rows=0 loops=1)
         ->  Bitmap Index Scan on application_resume_idx  (cost=0.00..4.46 rows=3 width=0) (actual time=0.012..0.012 rows=57 loops=1)
               Index Cond: (resume_id = 3000008)
         ->  Bitmap Index Scan on application_vacancy_idx  (cost=0.00..4.48 rows=6 width=0) (actual time=0.007..0.007 rows=35 loops=1)
               Index Cond: (vacancy_id = 8)
 Planning time: 0.074 ms
 Execution time: 0.056 ms
(10 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000012,
  'Добрый вечер!
В дополнение к тому, что указано в вакансии, добавляем:
  * рабочий день составляет 25 часов в сутки,
  * без выходных.
Приходите на собеседование завтра в 23:00.
Адрес: за гаражами',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.031..0.031 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.007..0.007 rows=1 loops=1)
 Planning time: 0.016 ms
 Trigger for constraint message_application_id_fkey: time=0.086 calls=1
 Execution time: 0.138 ms
(5 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000014,
  'Добрый вечер!
Решите, пожалуйста, тестовое задание.  
Вы можете скачать его по ссылке:
https://eprst-invest/testovoe-zadanie',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.129..0.129 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.024..0.025 rows=1 loops=1)
 Planning time: 0.042 ms
 Trigger for constraint message_application_id_fkey: time=0.221 calls=1
 Execution time: 0.406 ms
(5 rows)

EXPLAIN ANALYZE
SELECT application_id, employer.title, vacancy.salary_min, vacancy.salary_max, message.text
  FROM application JOIN vacancy USING (vacancy_id)
         JOIN employer USING (employer_id)
         JOIN message USING (application_id)
 WHERE resume_id = 3000008
   AND NOT applicant_to_employer;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1.58..68.74 rows=5 width=69) (actual time=0.554..1.119 rows=38 loops=1)
   ->  Nested Loop  (cost=1.15..42.76 rows=3 width=42) (actual time=0.085..0.624 rows=57 loops=1)
         ->  Nested Loop  (cost=0.86..41.81 rows=3 width=16) (actual time=0.070..0.393 rows=57 loops=1)
               ->  Index Scan using application_resume_idx on application  (cost=0.43..16.48 rows=3 width=8) (actual time=0.022..0.056 rows=57 loops=1)
                     Index Cond: (resume_id = 3000008)
               ->  Index Scan using vacancy_pkey on vacancy  (cost=0.42..8.44 rows=1 width=16) (actual time=0.005..0.005 rows=1 loops=57)
                     Index Cond: (vacancy_id = application.vacancy_id)
         ->  Index Scan using employer_pkey on employer  (cost=0.29..0.31 rows=1 width=34) (actual time=0.003..0.003 rows=1 loops=57)
               Index Cond: (employer_id = vacancy.employer_id)
   ->  Index Scan using message_application_idx on message  (cost=0.43..8.61 rows=5 width=31) (actual time=0.006..0.008 rows=1 loops=57)
         Index Cond: (application_id = application.application_id)
         Filter: (NOT applicant_to_employer)
         Rows Removed by Filter: 2
 Planning time: 1.841 ms
 Execution time: 1.217 ms
(15 rows)

BEGIN;
BEGIN
EXPLAIN ANALYZE
  INSERT INTO message (
    application_id, text, applicant_to_employer, created
  ) VALUES (
    5000012,
    'Здравствуйте,
К сожалению, по итогам длительных размышлений я пришел к выводу,
что вынужден отказаться от Вашей вакансии.
Спасибо, что уделили мне время!',
    TRUE,
    now()
  );
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.237..0.237 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.016..0.017 rows=1 loops=1)
 Planning time: 0.033 ms
 Trigger for constraint message_application_id_fkey: time=0.189 calls=1
 Execution time: 0.469 ms
(5 rows)

EXPLAIN ANALYZE
  UPDATE application SET application_status = 'CLOSED'
   WHERE application_id = 5000012;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Update on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.077..0.078 rows=0 loops=1)
   ->  Index Scan using application_pkey on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.017..0.019 rows=1 loops=1)
         Index Cond: (application_id = 5000012)
 Planning time: 0.093 ms
 Execution time: 0.127 ms
(5 rows)

END;
COMMIT
BEGIN;
BEGIN
EXPLAIN ANALYZE
  INSERT INTO message (
    application_id, text, applicant_to_employer, created
  ) VALUES (
    5000014,
    'Здравствуйте,
Я принимаю Ваше предложение.  С нетерпением жду начала работы!',
    TRUE,
    now()
  );
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.366..0.366 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.019..0.021 rows=1 loops=1)
 Planning time: 0.041 ms
 Trigger for constraint message_application_id_fkey: time=0.197 calls=1
 Execution time: 0.621 ms
(5 rows)

EXPLAIN ANALYZE
  UPDATE application SET application_status = 'CLOSED'
   WHERE application_id = 5000014;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Update on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.116..0.116 rows=0 loops=1)
   ->  Index Scan using application_pkey on application  (cost=0.43..8.45 rows=1 width=22) (actual time=0.086..0.088 rows=1 loops=1)
         Index Cond: (application_id = 5000014)
 Planning time: 0.123 ms
 Execution time: 0.172 ms
(5 rows)

END;
COMMIT
Pager usage is off.
CREATE SEQUENCE IF NOT EXISTS scenario2_employer_seq;
CREATE SEQUENCE
EXPLAIN ANALYZE
INSERT INTO account (login, email, password)
VALUES (
  (SELECT 'waterhouse' || nextval('scenario2_employer_seq')),
  'waterhouse@epiphyte',
  crypt('qwerty', gen_salt('bf')));
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Insert on account  (cost=0.02..0.04 rows=1 width=876) (actual time=6.499..6.499 rows=0 loops=1)
   InitPlan 1 (returns $0)
     ->  Result  (cost=0.00..0.02 rows=1 width=32) (actual time=0.117..0.117 rows=1 loops=1)
   ->  Result  (cost=0.00..0.03 rows=1 width=876) (actual time=6.277..6.278 rows=1 loops=1)
 Planning time: 0.271 ms
 Execution time: 7.283 ms
(6 rows)

EXPLAIN ANALYZE
SELECT account_id FROM account
 WHERE login='waterhouse1'
   AND password=crypt('qwerty', password);
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=5.839..5.843 rows=1 loops=1)
   Index Cond: ((login)::text = 'waterhouse1'::text)
   Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
 Planning time: 0.548 ms
 Execution time: 5.880 ms
(5 rows)

EXPLAIN ANALYZE
WITH created_employer AS (
  INSERT INTO employer (title)
  VALUES ('Epiphyte Corporation') RETURNING employer_id)
    INSERT INTO employer_account (account_id, employer_id)
    VALUES (
      (SELECT account_id FROM account
        WHERE login='waterhouse1'
          AND password=crypt('qwerty', password)),
      (SELECT employer_id FROM created_employer));
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Insert on employer_account  (cost=8.49..8.50 rows=1 width=8) (actual time=6.455..6.455 rows=0 loops=1)
   CTE created_employer
     ->  Insert on employer  (cost=0.00..0.01 rows=1 width=222) (actual time=0.229..0.230 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=222) (actual time=0.063..0.063 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_employer  (cost=0.00..0.02 rows=1 width=4) (actual time=0.231..0.232 rows=1 loops=1)
   InitPlan 3 (returns $3)
     ->  Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=5.964..5.968 rows=1 loops=1)
           Index Cond: ((login)::text = 'waterhouse1'::text)
           Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
   ->  Result  (cost=0.00..0.01 rows=1 width=8) (actual time=6.204..6.205 rows=1 loops=1)
 Planning time: 0.172 ms
 Trigger for constraint employer_account_employer_id_fkey on employer_account: time=0.603 calls=1
 Trigger for constraint employer_account_account_id_fkey on employer_account: time=0.252 calls=1
 Execution time: 7.494 ms
(15 rows)

EXPLAIN ANALYZE
SELECT employer_id, title
  FROM employer JOIN employer_account USING (employer_id)
 WHERE account_id = (SELECT account_id FROM account
                      WHERE login='waterhouse1'
                        AND password=crypt('qwerty', password));
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=8.74..1708.22 rows=1 width=34) (actual time=37.166..37.220 rows=19 loops=1)
   InitPlan 1 (returns $0)
     ->  Index Scan using login_idx on account  (cost=0.43..8.45 rows=1 width=4) (actual time=11.299..11.302 rows=1 loops=1)
           Index Cond: ((login)::text = 'waterhouse1'::text)
           Filter: ((password)::text = crypt('qwerty'::text, (password)::text))
   ->  Seq Scan on employer_account  (cost=0.00..1691.46 rows=1 width=4) (actual time=37.134..37.140 rows=19 loops=1)
         Filter: (account_id = $0)
         Rows Removed by Filter: 100021
   ->  Index Scan using employer_pkey on employer  (cost=0.29..8.31 rows=1 width=34) (actual time=0.003..0.003 rows=1 loops=19)
         Index Cond: (employer_id = employer_account.employer_id)
 Planning time: 0.989 ms
 Execution time: 37.284 ms
(12 rows)

EXPLAIN ANALYZE
INSERT INTO vacancy (
  employer_id, title, city_id, salary_min, salary_max, experience_years, schedule, vacancy_status)
VALUES (
  100007,
  'Java-программист',
  1,
  50000, 100000,
  '1-3',
  'FULL_TIME',
  'OPEN'
);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Insert on vacancy  (cost=0.00..0.01 rows=1 width=286) (actual time=1.352..1.352 rows=0 loops=1)
   ->  Result  (cost=0.00..0.01 rows=1 width=286) (actual time=0.056..0.057 rows=1 loops=1)
 Planning time: 0.049 ms
 Trigger for constraint vacancy_employer_id_fkey: time=0.306 calls=1
 Trigger for constraint vacancy_city_id_fkey: time=0.326 calls=1
 Execution time: 2.184 ms
(6 rows)

EXPLAIN ANALYZE
SELECT vacancy_id, title
  FROM vacancy
 WHERE employer_id = 100007;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on vacancy  (cost=28.09..75.59 rows=12 width=25) (actual time=0.074..0.255 rows=18 loops=1)
   Recheck Cond: (employer_id = 100007)
   Heap Blocks: exact=4
   ->  Bitmap Index Scan on vacancy_gin_idx  (cost=0.00..28.09 rows=12 width=0) (actual time=0.062..0.062 rows=18 loops=1)
         Index Cond: (employer_id = 100007)
 Planning time: 0.302 ms
 Execution time: 0.324 ms
(7 rows)

EXPLAIN ANALYZE
WITH my_vacancy AS (
  SELECT title, city_id, schedule, salary_min, salary_max, experience_years
    FROM vacancy WHERE vacancy_id = 1000010)
SELECT resume_id, applicant.name, resume.experience_years, resume.salary_min, resume.salary_max
  FROM resume JOIN applicant USING (applicant_id)
 WHERE resume.title = (SELECT title FROM my_vacancy) AND
       resume.city_id = (SELECT city_id FROM my_vacancy) AND
       resume.schedule = (SELECT schedule FROM my_vacancy) AND
       resume.experience_years = (SELECT experience_years FROM my_vacancy) AND
       (resume.salary_min IS NULL OR (SELECT salary_max FROM my_vacancy) IS NULL OR
         resume.salary_min <= (SELECT salary_max FROM my_vacancy)) AND 
        (resume.salary_max IS NULL OR (SELECT salary_min FROM my_vacancy) IS NULL OR
         resume.salary_max >= (SELECT salary_min FROM my_vacancy));
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=199.62..26388.79 rows=713 width=43) (actual time=0.907..0.917 rows=2 loops=1)
   CTE my_vacancy
     ->  Index Scan using vacancy_pkey on vacancy  (cost=0.42..8.44 rows=1 width=41) (actual time=0.037..0.038 rows=1 loops=1)
           Index Cond: (vacancy_id = 1000010)
   InitPlan 2 (returns $1)
     ->  CTE Scan on my_vacancy  (cost=0.00..0.02 rows=1 width=218) (actual time=0.041..0.043 rows=1 loops=1)
   InitPlan 3 (returns $2)
     ->  CTE Scan on my_vacancy my_vacancy_1  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
   InitPlan 4 (returns $3)
     ->  CTE Scan on my_vacancy my_vacancy_2  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   InitPlan 5 (returns $4)
     ->  CTE Scan on my_vacancy my_vacancy_3  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   InitPlan 6 (returns $5)
     ->  CTE Scan on my_vacancy my_vacancy_4  (cost=0.00..0.02 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
   InitPlan 7 (returns $6)
     ->  CTE Scan on my_vacancy my_vacancy_5  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   InitPlan 8 (returns $7)
     ->  CTE Scan on my_vacancy my_vacancy_6  (cost=0.00..0.02 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1)
   InitPlan 9 (returns $8)
     ->  CTE Scan on my_vacancy my_vacancy_7  (cost=0.00..0.02 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=1)
   ->  Bitmap Heap Scan on resume  (cost=190.59..20732.68 rows=713 width=20) (actual time=0.885..0.888 rows=2 loops=1)
         Recheck Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3))
         Filter: (((salary_min IS NULL) OR ($5 IS NULL) OR (salary_min <= $6)) AND ((salary_max IS NULL) OR ($7 IS NULL) OR (salary_max >= $8)))
         Heap Blocks: exact=1
         ->  Bitmap Index Scan on resume_gin_idx  (cost=0.00..190.42 rows=6294 width=0) (actual time=0.846..0.846 rows=2 loops=1)
               Index Cond: (((title)::text = ($1)::text) AND (city_id = $2) AND (experience_years = $4) AND (schedule = $3))
   ->  Index Scan using applicant_pkey on applicant  (cost=0.42..7.92 rows=1 width=31) (actual time=0.011..0.011 rows=1 loops=2)
         Index Cond: (applicant_id = resume.applicant_id)
 Planning time: 1.551 ms
 Execution time: 1.172 ms
(30 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (5, 1000010, 'OPEN')
  RETURNING application_id
) SELECT application_id
    FROM created_application;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 CTE Scan on created_application  (cost=0.01..0.04 rows=1 width=4) (actual time=0.360..0.363 rows=1 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.357..0.359 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.126..0.127 rows=1 loops=1)
 Planning time: 0.057 ms
 Trigger for constraint application_resume_id_fkey: time=0.572 calls=1
 Trigger for constraint application_vacancy_id_fkey: time=0.303 calls=1
 Execution time: 1.397 ms
(8 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  5000015,
  'Добрый вечер!
Приглашаем Вас пройти тестовое задание на вакансию Java-программист.
Ссылка на задание: https://epiphyte/test',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.291..0.292 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.093..0.094 rows=1 loops=1)
 Planning time: 0.042 ms
 Trigger for constraint message_application_id_fkey: time=0.552 calls=1
 Execution time: 1.027 ms
(5 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (6, 1000010, 'OPEN')
  RETURNING application_id
) SELECT application_id
    FROM created_application;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 CTE Scan on created_application  (cost=0.01..0.04 rows=1 width=4) (actual time=0.086..0.088 rows=1 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.083..0.084 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.014..0.015 rows=1 loops=1)
 Planning time: 0.071 ms
 Trigger for constraint application_resume_id_fkey: time=0.215 calls=1
 Trigger for constraint application_vacancy_id_fkey: time=0.132 calls=1
 Execution time: 0.504 ms
(8 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  5000017,
  'Добрый вечер!
Приглашаем Вас пройти тестовое задание на вакансию Java-программист.
Ссылка на задание: https://epiphyte/test',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.735..0.735 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.017..0.019 rows=1 loops=1)
 Planning time: 0.032 ms
 Trigger for constraint message_application_id_fkey: time=0.262 calls=1
 Execution time: 1.045 ms
(5 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000015,
  'Добрый вечер!
Вот мое решение тестового задания: https://patrikeevna/reshenie
С нетерпепием жду вашего отклика',
  TRUE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.072..0.072 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.015..0.016 rows=1 loops=1)
 Planning time: 0.032 ms
 Trigger for constraint message_application_id_fkey: time=0.208 calls=1
 Execution time: 0.323 ms
(5 rows)

EXPLAIN ANALYZE
WITH created_application AS (
  INSERT INTO application (resume_id, vacancy_id, application_status)
  VALUES (1, 1000010, 'OPEN')
  RETURNING application_id
) INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES (
  (SELECT application_id FROM created_application),
  'Добрый вечер!
Прошу рассмотреть мою кандидатуру на должно Java-программист.',
  TRUE,
  now()
);
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.04..0.06 rows=1 width=49) (actual time=0.134..0.134 rows=0 loops=1)
   CTE created_application
     ->  Insert on application  (cost=0.00..0.01 rows=1 width=16) (actual time=0.066..0.068 rows=1 loops=1)
           ->  Result  (cost=0.00..0.01 rows=1 width=16) (actual time=0.008..0.008 rows=1 loops=1)
   InitPlan 2 (returns $2)
     ->  CTE Scan on created_application  (cost=0.00..0.02 rows=1 width=4) (actual time=0.069..0.071 rows=1 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.086..0.086 rows=1 loops=1)
 Planning time: 0.085 ms
 Trigger for constraint message_application_id_fkey on message: time=0.095 calls=1
 Trigger for constraint application_resume_id_fkey on application: time=0.192 calls=1
 Trigger for constraint application_vacancy_id_fkey on application: time=0.126 calls=1
 Execution time: 0.622 ms
(12 rows)

EXPLAIN ANALYZE
SELECT application_id, resume_id, message.text
  FROM application JOIN resume USING (resume_id)
         JOIN message USING (application_id)
 WHERE vacancy_id = 1000010 AND applicant_to_employer;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=1.30..107.18 rows=9 width=35) (actual time=0.043..0.663 rows=38 loops=1)
   ->  Nested Loop  (cost=0.86..55.22 rows=6 width=8) (actual time=0.033..0.309 rows=57 loops=1)
         ->  Index Scan using application_vacancy_idx on application  (cost=0.43..28.54 rows=6 width=8) (actual time=0.018..0.066 rows=57 loops=1)
               Index Cond: (vacancy_id = 1000010)
         ->  Index Only Scan using resume_pkey on resume  (cost=0.43..4.45 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=57)
               Index Cond: (resume_id = application.resume_id)
               Heap Fetches: 0
   ->  Index Scan using message_application_idx on message  (cost=0.43..8.61 rows=5 width=31) (actual time=0.004..0.005 rows=1 loops=57)
         Index Cond: (application_id = application.application_id)
         Filter: applicant_to_employer
         Rows Removed by Filter: 1
 Planning time: 1.071 ms
 Execution time: 0.750 ms
(13 rows)

EXPLAIN ANALYZE
INSERT INTO message (
  application_id, text, applicant_to_employer, created
) VALUES  (
  5000015,
  'Добрый день!
Поздравляем!  Вы приняты!',
  FALSE,
  now()
);
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Insert on message  (cost=0.00..0.02 rows=1 width=49) (actual time=0.061..0.061 rows=0 loops=1)
   ->  Result  (cost=0.00..0.02 rows=1 width=49) (actual time=0.014..0.014 rows=1 loops=1)
 Planning time: 0.030 ms
 Trigger for constraint message_application_id_fkey: time=0.190 calls=1
 Execution time: 0.292 ms
(5 rows)

BEGIN;
BEGIN
EXPLAIN ANALYZE
  UPDATE vacancy SET vacancy_status = 'CLOSED'
   WHERE vacancy_id = 1000010;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Update on vacancy  (cost=0.42..8.44 rows=1 width=107) (actual time=0.074..0.075 rows=0 loops=1)
   ->  Index Scan using vacancy_pkey on vacancy  (cost=0.42..8.44 rows=1 width=107) (actual time=0.021..0.023 rows=1 loops=1)
         Index Cond: (vacancy_id = 1000010)
 Planning time: 0.215 ms
 Execution time: 0.136 ms
(5 rows)

EXPLAIN ANALYZE
  UPDATE application SET application_status = 'CLOSED'
   WHERE vacancy_id = 1000010;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Update on application  (cost=0.43..28.54 rows=6 width=22) (actual time=0.375..0.376 rows=0 loops=1)
   ->  Index Scan using application_vacancy_idx on application  (cost=0.43..28.54 rows=6 width=22) (actual time=0.025..0.087 rows=57 loops=1)
         Index Cond: (vacancy_id = 1000010)
 Planning time: 0.099 ms
 Execution time: 0.414 ms
(5 rows)

END;
COMMIT
